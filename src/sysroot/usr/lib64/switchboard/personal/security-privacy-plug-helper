#!/usr/bin/bash

function die() {
    echo -e "Error: $@"
    exit 1
}

function get_status() {
    fwc_state="$(firewall-cmd --state)"

    case ${fwc_state} in
        "running") echo "active";;
        "not running") echo "inactive";;
        *) echo "unknown";;
    esac
}

function list_rules() {
     echo -e "Status: $(get_status)\n"
     echo -e "\n"
     echo -e "     To                         Action      From\n"
     echo -e "     --                         ------      ----\n"

     id=0
     firewall-cmd --list-rich-rules --permanent | while read line; do
         action=""
         direction=""
         from=""
         id=$((id+1))
         to=""

         if [[ $line =~ ((port|source-port) port=\"([0-9]{1,5})\" protocol=\"(tcp|udp)\") ]]; then
             to="${BASH_REMATCH[3]}/${BASH_REMATCH[4]}"

             case "${BASH_REMATCH[2]}" in
                 "port") direction="IN";;
                 "source-port") direction="OUT";;
             esac
         fi

         if [[ $line =~ (accept limit|accept|drop|reject) ]]; then
             case "${BASH_REMATCH[1]}" in
                 "accept") action="ALLOW";;
                 "accept limit") action="LIMIT";;
                 "drop") action="DENY";;
                 "reject") action="REJECT";;
             esac
         fi

         if [[ $line =~ (source address=\"([0-9\.\/]{9,18}|[\:\/0-9A-Fa-f]{4,43})\") ]]; then
             if { [[ "${BASH_REMATCH[2]}" == "0.0.0.0/0" ]] || [[ "${BASH_REMATCH[2]}" == "::/0" ]]; }; then
                 from="Anywhere"
             else
                 from="${BASH_REMATCH[2]}"
             fi
         else
             from="Anywhere"
         fi

         if [[ ! -z $to ]]; then
             if [[ $line =~ (family=\"(ipv4|ipv6)\") ]]; then
                 if [[ "${BASH_REMATCH[2]}" == "ipv6" ]]; then
                     to+=" (v6)"
                     from+=" (v6)"
                 fi

                 echo -e "[$id] $to  $action $direction  $from\n"
             else
                 echo -e "[$id] $to  $action $direction  Anywhere\n"
                 echo -e "[$id] $to (v6)  $action $direction  Anywhere (v6)\n"
             fi
         fi
     done
}

function add_rule() {
    ufw_options="$@"

    if [[ "$ufw_options" =~ ((allow|deny|reject|limit) (in|out) proto (tcp|udp) to ([0-9\.\/]{9,18}|[\:\/0-9A-Fa-f]{4,43}|any) port ([0-9]{1,5}) from ([0-9\.\/]{9,18}|[\:\/0-9A-Fa-f]{4,43}|any)) ]]; then
        action="${BASH_REMATCH[2]}"
        direction="${BASH_REMATCH[3]}"
        element="port"
        from="${BASH_REMATCH[7]}"
        port="${BASH_REMATCH[6]}"
        protocol="${BASH_REMATCH[4]}"
        to="${BASH_REMATCH[5]}"

        [[ $direction == "out" ]] && element="source-port"

        case ${action} in
            "allow") action="accept";;
            "deny") action="drop";;
            "limit") action="accept limit value=\"30/s\"";;
            "reject") action="reject";;
        esac

        echo "$action"

        if [[ $to == "any" ]]; then
            firewall-cmd --add-rich-rule='rule '"family=ipv4 $element port=$port protocol=$protocol source address=0.0.0.0/0 $action"'' --permanent
            firewall-cmd --add-rich-rule='rule '"family=ipv6 $element port=$port protocol=$protocol source address=::/0 $action"'' --permanent
        else
            if [[ $(echo $from | grep ":") ]]; then
                firewall-cmd --add-rich-rule='rule '"family=ipv6 $element port=$port protocol=$protocol source address=$from $action"'' --permanent
            else
                firewall-cmd --add-rich-rule='rule '"family=ipv4 $element port=$port protocol=$protocol source address=$from $action"'' --permanent
            fi
        fi
    else
        die "Could not parse options"
    fi
}

function del_rule() {
    id=0
    firewall-cmd --list-rich-rules --permanent | while read line; do
        id=$((id+1))

        if [[ $id == $1 ]]; then
            firewall-cmd --remove-rich-rule=''"$line"'' --permanent
            break
        fi
    done
}

while getopts "12345:6:" OPTION; do
    case ${OPTION} in
        2)
             systemctl enable --now firewalld
             ;;
        3)
             systemctl disable --now firewalld
             ;;
        4|1)
             list_rules
             ;;
        5)
             add_rule $2
             ;;
        6)
             del_rule $OPTARG
             ;;
        *)
             die "Not implemented"
             ;;
    esac
done
